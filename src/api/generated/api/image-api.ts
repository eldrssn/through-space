/* tslint:disable */
/* eslint-disable */
/**
 * app
 * app
 *
 * The version of the OpenAPI document: 0.1
 * Contact: s@studiotribe.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { GetImageById404Response } from '../models';
// @ts-ignore
import type { ImageByIdResponse } from '../models';
// @ts-ignore
import type { ImageBySearchQueryResponse } from '../models';
// @ts-ignore
import type { ImagesByCoordinatesResponse } from '../models';
// @ts-ignore
import type { Unprocessable } from '../models';
/**
 * ImageApi - axios parameter creator
 * @export
 */
export const ImageApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Получить объект картинки по id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageById: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getImageById', 'id', id)
            const localVarPath = `/api/images/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Получить объект планет в заданной области координат
         * @param {number} xMin Минимальная координата X
         * @param {number} xMax Максимальная координата X (≥ x_min)
         * @param {number} yMin Минимальная координата Y
         * @param {number} yMax Максимальная координата Y (≥ y_min)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesByCoordinates: async (xMin: number, xMax: number, yMin: number, yMax: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'xMin' is not null or undefined
            assertParamExists('getImagesByCoordinates', 'xMin', xMin)
            // verify required parameter 'xMax' is not null or undefined
            assertParamExists('getImagesByCoordinates', 'xMax', xMax)
            // verify required parameter 'yMin' is not null or undefined
            assertParamExists('getImagesByCoordinates', 'yMin', yMin)
            // verify required parameter 'yMax' is not null or undefined
            assertParamExists('getImagesByCoordinates', 'yMax', yMax)
            const localVarPath = `/api/images`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (xMin !== undefined) {
                localVarQueryParameter['x_min'] = xMin;
            }

            if (xMax !== undefined) {
                localVarQueryParameter['x_max'] = xMax;
            }

            if (yMin !== undefined) {
                localVarQueryParameter['y_min'] = yMin;
            }

            if (yMax !== undefined) {
                localVarQueryParameter['y_max'] = yMax;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Поиск картинки
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchImage: async (search: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('searchImage', 'search', search)
            const localVarPath = `/api/images/search/{search}`
                .replace(`{${"search"}}`, encodeURIComponent(String(search)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ImageApi - functional programming interface
 * @export
 */
export const ImageApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ImageApiAxiosParamCreator(configuration)
    return {
        /**
         * Получить объект картинки по id
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImageById(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImageById(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.getImageById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Получить объект планет в заданной области координат
         * @param {number} xMin Минимальная координата X
         * @param {number} xMax Максимальная координата X (≥ x_min)
         * @param {number} yMin Минимальная координата Y
         * @param {number} yMax Максимальная координата Y (≥ y_min)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getImagesByCoordinates(xMin: number, xMax: number, yMin: number, yMax: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImagesByCoordinatesResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getImagesByCoordinates(xMin, xMax, yMin, yMax, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.getImagesByCoordinates']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Поиск картинки
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchImage(search: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ImageBySearchQueryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchImage(search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ImageApi.searchImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ImageApi - factory interface
 * @export
 */
export const ImageApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ImageApiFp(configuration)
    return {
        /**
         * Получить объект картинки по id
         * @param {ImageApiGetImageByIdRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImageById(requestParameters: ImageApiGetImageByIdRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageByIdResponse> {
            return localVarFp.getImageById(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * Получить объект планет в заданной области координат
         * @param {ImageApiGetImagesByCoordinatesRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getImagesByCoordinates(requestParameters: ImageApiGetImagesByCoordinatesRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImagesByCoordinatesResponse> {
            return localVarFp.getImagesByCoordinates(requestParameters.xMin, requestParameters.xMax, requestParameters.yMin, requestParameters.yMax, options).then((request) => request(axios, basePath));
        },
        /**
         * Поиск картинки
         * @param {ImageApiSearchImageRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchImage(requestParameters: ImageApiSearchImageRequest, options?: RawAxiosRequestConfig): AxiosPromise<ImageBySearchQueryResponse> {
            return localVarFp.searchImage(requestParameters.search, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getImageById operation in ImageApi.
 * @export
 * @interface ImageApiGetImageByIdRequest
 */
export interface ImageApiGetImageByIdRequest {
    /**
     * 
     * @type {string}
     * @memberof ImageApiGetImageById
     */
    readonly id: string
}

/**
 * Request parameters for getImagesByCoordinates operation in ImageApi.
 * @export
 * @interface ImageApiGetImagesByCoordinatesRequest
 */
export interface ImageApiGetImagesByCoordinatesRequest {
    /**
     * Минимальная координата X
     * @type {number}
     * @memberof ImageApiGetImagesByCoordinates
     */
    readonly xMin: number

    /**
     * Максимальная координата X (≥ x_min)
     * @type {number}
     * @memberof ImageApiGetImagesByCoordinates
     */
    readonly xMax: number

    /**
     * Минимальная координата Y
     * @type {number}
     * @memberof ImageApiGetImagesByCoordinates
     */
    readonly yMin: number

    /**
     * Максимальная координата Y (≥ y_min)
     * @type {number}
     * @memberof ImageApiGetImagesByCoordinates
     */
    readonly yMax: number
}

/**
 * Request parameters for searchImage operation in ImageApi.
 * @export
 * @interface ImageApiSearchImageRequest
 */
export interface ImageApiSearchImageRequest {
    /**
     * 
     * @type {string}
     * @memberof ImageApiSearchImage
     */
    readonly search: string
}

/**
 * ImageApi - object-oriented interface
 * @export
 * @class ImageApi
 * @extends {BaseAPI}
 */
export class ImageApi extends BaseAPI {
    /**
     * Получить объект картинки по id
     * @param {ImageApiGetImageByIdRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getImageById(requestParameters: ImageApiGetImageByIdRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).getImageById(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Получить объект планет в заданной области координат
     * @param {ImageApiGetImagesByCoordinatesRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public getImagesByCoordinates(requestParameters: ImageApiGetImagesByCoordinatesRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).getImagesByCoordinates(requestParameters.xMin, requestParameters.xMax, requestParameters.yMin, requestParameters.yMax, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Поиск картинки
     * @param {ImageApiSearchImageRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ImageApi
     */
    public searchImage(requestParameters: ImageApiSearchImageRequest, options?: RawAxiosRequestConfig) {
        return ImageApiFp(this.configuration).searchImage(requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }
}

